SEARCH_URL = 'http://www.mtv.com/search/video/'
BASE_URL = 'http://www.mtv.com'
RE_DATE  = Regex('Posted (.+?)[ .]')
# SEARCHES DO NOT HAVE PLAYLIST  SO URLS DO NOT END WITH ID=

####################################################################################################
def Search(query):
    oc = ObjectContainer(title1='MTV', title2='Search Results')
    url = SEARCH_URL + '?q=' + String.Quote(query, usePlus = False)
    data = HTML.ElementFromURL(url)
    for item in data.xpath('//ul[contains(@class,"mtvn-lst")]/li'):
        link = item.xpath('.//a//@href')[0]
        #if not link.startswith('http://'):
            #link = BASE_URL + link
        if not link.startswith('http://www.mtv.com'):
            continue
        image = item.xpath('.//img//@src')[0]
        if not image.startswith('http://'):
            image = BASE_URL + image
        video_title = item.xpath('./div[contains(@class,"item-content")]//a/text()')[0]
        summary = str(item.xpath('.//p[contains(@class,"mtvn-desc")]//text()'))
        try:
            date = RE_DATE.search(summary).group(1)
            date = Datetime.ParseDate(date)
        except:
            date = None

        oc.add(VideoClipObject(url=link, title=video_title, originally_available_at=date, thumb=Resource.ContentsOfURLWithFallback(url=image)))

    return oc
